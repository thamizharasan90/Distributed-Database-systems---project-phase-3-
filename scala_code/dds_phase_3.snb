{
  "metadata" : {
    "name" : "dds_phase_3",
    "user_save_timestamp" : "1969-12-31T17:00:00.000Z",
    "auto_save_timestamp" : "1969-12-31T17:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.app.name" : "Notebook",
      "spark.master" : "spark://localhost:7077",
      "spark.executor.memory" : "5G"
    }
  },
  "cells" : [ {
    "metadata" : {
      "id" : "AEA411ACB83D4440BEEDE6B791EC6B07"
    },
    "cell_type" : "markdown",
    "source" : "CSV path on HDFS"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FE648D1C20EE47F68CA933EB1FF5FF5D"
    },
    "cell_type" : "code",
    "source" : "val textFile = \"yellow_tripdata_2015-01_small.csv\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "textFile: String = yellow_tripdata_2015-01_small.csv\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1,
      "time" : "Took: 765 milliseconds, at 2016-12-1 0:3"
    } ]
  }, {
    "metadata" : {
      "id" : "9D0CD16656274D2281DD9B6B1649BC5C"
    },
    "cell_type" : "markdown",
    "source" : "Load CSV into spark context"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FDC2F610FBF8471D891C62CA1A0E9DA4"
    },
    "cell_type" : "code",
    "source" : "val csvFileRDD = sc textFile textFile\ncsvFileRDD.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "csvFileRDD: org.apache.spark.rdd.RDD[String] = yellow_tripdata_2015-01_small.csv MapPartitionsRDD[1] at textFile at <console>:69\nres2: Long = 1274898\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "1274898"
      },
      "output_type" : "execute_result",
      "execution_count" : 2,
      "time" : "Took: 2 seconds 225 milliseconds, at 2016-12-1 0:3"
    } ]
  }, {
    "metadata" : {
      "id" : "D74166699065421FA4FA9A84B1E1DAE2"
    },
    "cell_type" : "markdown",
    "source" : "Take header and remove it from the RDD"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab230873426-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "0AA79BF7771741519AA8C8B1C35AD9F5"
    },
    "cell_type" : "code",
    "source" : "val first = csvFileRDD.first\nval filteredCSVRDD = csvFileRDD filter {x => x!=first }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "first: String = VendorID,tpep_pickup_datetime,tpep_dropoff_datetime,passenger_count,trip_distance,pickup_longitude,pickup_latitude,RateCodeID,store_and_fwd_flag,dropoff_longitude,dropoff_latitude,payment_type,fare_amount,extra,mta_tax,tip_amount,tolls_amount,improvement_surcharge,total_amount\nfilteredCSVRDD: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[2] at filter at <console>:72\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3,
      "time" : "Took: 624 milliseconds, at 2016-12-1 0:3"
    } ]
  }, {
    "metadata" : {
      "id" : "F327DE67EA354A5680B6749A888AB69E"
    },
    "cell_type" : "markdown",
    "source" : "Define functions to filter out unwanted columns, then convert date field to a Int representing the day of month, round up lat, long."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab892525559-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "56184724C44847BE8BBAFB933EC2475E"
    },
    "cell_type" : "code",
    "source" : "def roundUp(d:String,i:Int): Double = {\n  \n  (d.substring(0,i).toDouble)\n}\ndef splitFilter(s:Array[String]): (Int, Double, Double) = {\n  var result:(Int, Double, Double) = null;\n  def reRound(x:Int,i:Int):Double = if(s(x).length>i) roundUp(s(x),i) else s(x).toDouble;\n (s(1).split(\" \")(0).split(\"-\")(2).toInt, reRound(5,6), reRound(6,7))\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "roundUp: (d: String, i: Int)Double\nsplitFilter: (s: Array[String])(Int, Double, Double)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 33,
      "time" : "Took: 359 milliseconds, at 2016-12-1 0:28"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1052130183-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "32E462062AC1487380ADB4CF1BAF804E"
    },
    "cell_type" : "code",
    "source" : "val roundedRDD = filteredCSVRDD.map( x => (splitFilter(x.split(\",\"))))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "roundedRDD: org.apache.spark.rdd.RDD[(Int, Double, Double)] = MapPartitionsRDD[40] at map at <console>:77\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 34,
      "time" : "Took: 373 milliseconds, at 2016-12-1 0:28"
    } ]
  }, {
    "metadata" : {
      "id" : "1E1BCBBA7459472988BA1B78F942DCD7"
    },
    "cell_type" : "markdown",
    "source" : "Range envelope filtering, removing zeroes"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1892864059-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "268292C603AC447C8C74CF5603C2BA12"
    },
    "cell_type" : "code",
    "source" : "val noZeroesRDD = roundedRDD filter { x =>  x._3 > 40.50 && x._3 < 40.90 && x._2 > -74.25 && x._2 < -73.70} \nval orderByLongitude = new Ordering[(Int,Int,Int)]() {\n  override def compare(x: (Int,Int, Int), y: (Int,Int,Int)): Int = \n    x._3 compare y._3\n}\nval orderByLatitude = new Ordering[(Int,Int,Int)]() {\n  override def compare(x: (Int, Int,Int), y: (Int,Int,Int)): Int = \n    x._2 compare y._2\n}\nval intedRDD = noZeroesRDD map { x => (x._1, (x._2*1000).toInt, (x._3*1000).toInt)}\nval intedRDDOf1 = intedRDD.take(1)\nval maxLongitude = intedRDD.max()(orderByLongitude)._3\nval minLongitude = intedRDD.min()(orderByLongitude)._3\nval maxLatitude = intedRDD.max()(orderByLatitude)._2\nval minLatitude = intedRDD.min()(orderByLatitude)._2\nval xcells = (maxLongitude-minLongitude)/10\nval ycells = (maxLatitude-minLatitude)/10",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "noZeroesRDD: org.apache.spark.rdd.RDD[(Int, Double, Double)] = MapPartitionsRDD[41] at filter at <console>:88\norderByLongitude: Ordering[(Int, Int, Int)] = $anon$1@6a2c583b\norderByLatitude: Ordering[(Int, Int, Int)] = $anon$2@ac222ea\nintedRDD: org.apache.spark.rdd.RDD[(Int, Int, Int)] = MapPartitionsRDD[42] at map at <console>:97\nintedRDDOf1: Array[(Int, Int, Int)] = Array((15,-73990,40750))\nmaxLongitude: Int = 40899\nminLongitude: Int = 40544\nmaxLatitude: Int = -73710\nminLatitude: Int = -74240\nxcells: Int = 35\nycells: Int = 53\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 35,
      "time" : "Took: 2 seconds 805 milliseconds, at 2016-12-1 0:28"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab381990020-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "4F0A82B0CDCC4A3C812134B7421B3A39"
    },
    "cell_type" : "code",
    "source" : "val rangeX = minLongitude to maxLongitude by 1\nval cutRDD = intedRDD map { x => (x._1, x._2+74250, x._3-40500) }\ncutRDD.count",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "rangeX: scala.collection.immutable.Range = Range(40544, 40545, 40546, 40547, 40548, 40549, 40550, 40551, 40552, 40553, 40554, 40555, 40556, 40557, 40558, 40559, 40560, 40561, 40562, 40563, 40564, 40565, 40566, 40567, 40568, 40569, 40570, 40571, 40572, 40573, 40574, 40575, 40576, 40577, 40578, 40579, 40580, 40581, 40582, 40583, 40584, 40585, 40586, 40587, 40588, 40589, 40590, 40591, 40592, 40593, 40594, 40595, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40605, 40606, 40607, 40608, 40609, 40610, 40611, 40612, 40613, 40614, 40615, 40616, 40617, 40618, 40619, 40620, 40621, 40622, 40623, 40624, 40625, 40626, 40627, 40628, 40629, 40630, 40631, 40632, 40633, 40634, 40635, 40636, 40637, 40638, 40639, 40640, 40641, 40642, 40643, 40644, 40645, 40646, 40647, 40648, 40649, 40650,..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "1250330"
      },
      "output_type" : "execute_result",
      "execution_count" : 44,
      "time" : "Took: 1 second 204 milliseconds, at 2016-12-1 0:35"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5673534C1BE3419288FA05150A772971"
    },
    "cell_type" : "code",
    "source" : "def isInCell(d:(Int,Int,Int), c:(Int,Int)): Boolean = {\n    ((c._1)*10 <= d._2) &&\n    (d._2 <=(c._1+1)*10-1) &&\n    ((c._2)*10 <= d._3) && \n    (d._3 <= (c._2+1)*10-1)\n  }",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "isInCell: (d: (Int, Int, Int), c: (Int, Int))Boolean\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 38,
      "time" : "Took: 364 milliseconds, at 2016-12-1 0:29"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1006807321-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "AD5B7ECF7233457B8D0E49CB3B292104"
    },
    "cell_type" : "code",
    "source" : "val zippedGrid = Array.tabulate(ycells,xcells)( (x,y) => (x,y)).flatten.zipWithIndex",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "zippedGrid: Array[((Int, Int), Int)] = Array(((0,0),0), ((0,1),1), ((0,2),2), ((0,3),3), ((0,4),4), ((0,5),5), ((0,6),6), ((0,7),7), ((0,8),8), ((0,9),9), ((0,10),10), ((0,11),11), ((0,12),12), ((0,13),13), ((0,14),14), ((0,15),15), ((0,16),16), ((0,17),17), ((0,18),18), ((0,19),19), ((0,20),20), ((0,21),21), ((0,22),22), ((0,23),23), ((0,24),24), ((0,25),25), ((0,26),26), ((0,27),27), ((0,28),28), ((0,29),29), ((0,30),30), ((0,31),31), ((0,32),32), ((0,33),33), ((0,34),34), ((1,0),35), ((1,1),36), ((1,2),37), ((1,3),38), ((1,4),39), ((1,5),40), ((1,6),41), ((1,7),42), ((1,8),43), ((1,9),44), ((1,10),45), ((1,11),46), ((1,12),47), ((1,13),48), ((1,14),49), ((1,15),50), ((1,16),51), ((1,17),52), ((1,18),53), ((1,19),54), ((1,20),55), ((1,21),56), ((1,22),57), ((1,23),58), ((1,24),59), ((..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 39,
      "time" : "Took: 413 milliseconds, at 2016-12-1 0:29"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "45FCD7A1FEC142868726B52626D0D58B"
    },
    "cell_type" : "code",
    "source" : "val spatialCelledRDD = cutRDD map { x => ((zippedGrid filter { y => isInCell(x,y._1)}, x._1)) }\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "spatialCelledRDD: org.apache.spark.rdd.RDD[(Array[((Int, Int), Int)], Int)] = MapPartitionsRDD[44] at map at <console>:96\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 40,
      "time" : "Took: 454 milliseconds, at 2016-12-1 0:29"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1510036932-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "2645269D1DB84993915319E255EED51A"
    },
    "cell_type" : "code",
    "source" : "val keyedSpatialCelledRDD = spatialCelledRDD.filter(x => x._1.length>0).map(x => ((x._1(0)._2, x._2),1))\nval reducedCelledRDD = keyedSpatialCelledRDD.reduceByKey(_ + _)\nval orderInt = new Ordering[((Int,Int),Int)]() {\n  override def compare(x: ((Int,Int),Int), y: ((Int,Int),Int)): Int = \n    x._2 compare y._2\n}\nreducedCelledRDD.max()(orderInt)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "keyedSpatialCelledRDD: org.apache.spark.rdd.RDD[((Int, Int), Int)] = MapPartitionsRDD[78] at map at <console>:101\nreducedCelledRDD: org.apache.spark.rdd.RDD[((Int, Int), Int)] = ShuffledRDD[79] at reduceByKey at <console>:102\norderInt: Ordering[((Int, Int), Int)] = $anon$1@30fada7f\nres113: ((Int, Int), Int) = ((1005,15),3503)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "((1005,15),3503)"
      },
      "output_type" : "execute_result",
      "execution_count" : 74,
      "time" : "Took: 15 seconds 871 milliseconds, at 2016-12-1 0:50"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CDF5DDBCB000474FA3E8D626C7ACA865"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "<console>:102: error: value reduceByKey is not a member of org.apache.spark.rdd.RDD[(Int, Int, Int)]\n       val reducedCelledRDD = keyedSpatialCelledRDD.reduceByKey(_ + _)\n                                                    ^\n"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "8BE8C04C60BB4E53BFDE83CCD65F17FC"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}